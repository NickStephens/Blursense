#include xmlrpc_server.repy
#include BatteryRequest.repy
#include GPSRequest.repy
#include PressureRequest.repy


dy_import_module_symbols("xmlrpc_server.repy")
dy_import_module_symbols("batteryrequest.repy")
dy_import_module_symbols("gpsrequest.repy")
dy_import_module_symbols("pressurerequest.repy")


SEATTLE_PORTS = [63090, 63091, 63092, 63093, 63094, 63095, 63096, 63097, 63098, 63099]
LOCALHOST = "127.0.0.1"


class BlurServer:
	
	def __init__ (self):
		log("Server Initializing")
		self.mSensors = {}
		self.addSensors()	

		for p in SEATTLE_PORTS:
			try:
				log(str(p) + "\n")
				self.mServer = xmlrpc_server_SimpleXMLRPCServer((LOCALHOST, p))
				self.mServer.register_function(caller, "caller")
				self.mServer.serve_forever()
				break
			except Exception as e:
				log(e) 
				self.mServer = None
				continue

		if self.mServer == None:
			raise Exception("Ports Unavailable!")


	def addSensors(self):
		# Register Sensors
		self.register(BatteryRequest())
		self.register(GPSRequest())
		self.register(PressureRequest())
		

	# Register a sensor
	def register(self, sensor):
		name = sensor.name()
		self.mSensors[name] = sensor

	
	def caller(self, sensor, params):
		if not sensor in self.mSensors:
			return ""

		return self.mSensors["sensor"].get(params)
