dy_import_module_symbols("xmlparse.repy")
dy_import_module_symbols("xmlrpc_common.repy")
dy_import_module_symbols("urllib.repy")


class XMLRPCServer():
	def __init__(self, ip, port):
		self.mIp = ip
		self.mPort = port

		self.registered_function = {}


	def register_function(self, function, functionName):
		self.registered_function[functionName] = function


	def _call_function(self, functionName, args):
		if self.registered_function.has_key(functionName):
			return self.registered_function[functionName](*args)

		raise Exception("Function %s does not exist" % functionName)		


	def _connect(self, socket):
		# The callback for client connections.  Handle the request.
		full_request_data = ""
		while full_request_data.find("\r\n\r\n") < 0:   # working around
					  # our sockets not knowing when they
					  # hit EOF
			try:
				full_request_data += socket.recv(4096)
			except Exception:
				# The client probably disconnected.
				socket.close()
				return

		http_commandline, request_data = full_request_data.split("\r\n", 1)

		http_command, http_path, http_protocol = http_commandline.split(None, 2)
		if not (http_path == "/RPC2" or http_path == "/") or http_command != "POST":
			raise xmlrpc_server_ClientError("xmlrpc_server error: client " + "sent invalid request (wrong path or wrong HTTP method)")

		# Ignore protocol for now, we'll close connections from HTTP/1.1 clients
		# that want keep-alive for now.

		http_header_text, post_payload = request_data.split("\r\n\r\n", 1)
		http_headers = {}
		for line in http_header_text.split("\r\n"):
			header_name, header_value = line.split(": ", 1)
			http_headers[header_name.lower()] = header_value

		# Sometimes the client hasn't finished sending us the request; in this
		# case we keep trying to recieve more data until we can parse the
		# data. There is probably a better way of doing this (one solution is
		# to fix our client to send the request as one chunk of data so we
		# don't have to do things like this; another is to add EOF and non-
		# blocking support to our emulated_socket class).
		while True:
			try:
				methodname, params = xmlrpc_common_call2python(post_payload)
				break
			except Exception:
				post_payload += socket.recv(4096)

		# Make the method call, get the result.
		try:
			result = self._call_function(methodname, params)
		except Exception as e:
			log(e)
			result = None   # Maybe we should send a fault back to the client?

		# Encode the result and send it back to the client.
		xmlresponse = xmlrpc_common_response2xml(result)
		response = "HTTP/1.1 200 OK\r\nServer: SimpleXMLRPCServer on Repy\r\n" + "Content-type: text/xml\r\nContent-length: %i\r\n\r\n%s" % (len(xmlresponse), xmlresponse)

		while True:
			sent = socket.send(response)
			if sent >= len(response):
				break
			response = response[sent:]

		socket.close()

	 
	# Dispatching unit
	# Todo: add a queue to avoid allocating too many worker threads
	def _dispatch(self, clientSocket):
		def entrypoint():
			self._connect(clientSocket)
	
		createthread(entrypoint)
			


	# Start listening and dispatch request to a separate thread
	def serve_forever(self):
		try:
			self.mServerSocket = listenforconnection(self.mIp, self.mPort)
		except Exception as e:
			log(e)
			raise e

		while True:
			try:
				ret = self.mServerSocket.getconnection()
				log("Dispatching %s:%s\n" % (ret[0], ret[1]))
				self._dispatch(ret[2])
			except SocketWouldBlockError as e:
				continue
			except Exception as e:
				log(e)
				break

		self.mServerSocket.close()
		
