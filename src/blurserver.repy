dy_import_module_symbols("xmlrpc_server.repy")
dy_import_module_symbols("xmlrpc_server_custom.repy")
dy_import_module_symbols("battery.repy")


SEATTLE_PORTS = [63090, 63091, 63092, 63093, 63094, 63095, 63096, 63097, 63098, 63099]
LOCALHOST = "127.0.0.1"


class BlurServer:
	
	def __init__ (self):
		log("Server Initializing")
		self.addSensors()

		for p in SEATTLE_PORTS:
			try:
				log(str(p) + "\n")
				#self.mServer = xmlrpc_server_SimpleXMLRPCServer((LOCALHOST, p))
				self.mServer = XMLRPCServer(LOCALHOST, p)
				self.mServer.register_function(self.callback_function(), "request")
				self.mServer.serve_forever()
				break
			except Exception as e:
				log(e) 
				self.mServer = None
				continue

		if self.mServer == None:
			raise Exception("Ports Unavailable!")


	def addSensors(self):
		self.mSensors = {}

		# Register Sensors
		self.register(Battery(None))
		

	# Register a sensor
	def register(self, sensor):
		self.mSensors[sensor.name()] = sensor


	def callback_function(self):
		def request(name, params):
			if not name in self.mSensors:
				return "Not Available"

			log("Requesting %s.get()\n" % name)
			return self.mSensors[name].get(*params)

		return request
